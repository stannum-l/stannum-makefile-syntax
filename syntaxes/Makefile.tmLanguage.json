{
  "fileTypes": [
    "Makefile",
    "makefile",
    "GNUmakefile",
    "OCamlMakefile",
    "mk"
  ],
  "name": "Makefile",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#variable-assignment"
    },
    {
      "include": "#recipe"
    },
    {
      "include": "#directives"
    }
  ],
  "repository": {
    "comment": {
      "begin": "(^[ \\t]+)?(?=#)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.whitespace.comment.leading.makefile"
        }
      },
      "end": "(?!\\G)",
      "patterns": [
        {
          "begin": "#",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.makefile"
            }
          },
          "end": "\\n",
          "name": "comment.line.number-sign.makefile",
          "patterns": [
            {
              "match": "\\\\\\n",
              "name": "constant.character.escape.continuation.makefile"
            }
          ]
        }
      ]
    },
    "directives": {
      "patterns": [
        {
          "begin": "^[ ]*([s\\-]?include)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.include.makefile"
            }
          },
          "end": "^",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#variables"
            },
            {
              "match": "%",
              "name": "constant.other.placeholder.makefile"
            }
          ]
        },
        {
          "begin": "^[ ]*(vpath)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.vpath.makefile"
            }
          },
          "end": "^",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#variables"
            },
            {
              "match": "%",
              "name": "constant.other.placeholder.makefile"
            }
          ]
        },
        {
          "begin": "^(?:(override)\\s*)?(define)\\s*([^\\s]+)\\s*(=|\\?=|:=|\\+=)?(?=\\s)",
          "captures": {
            "1": {
              "name": "keyword.control.override.makefile"
            },
            "2": {
              "name": "keyword.control.define.makefile"
            },
            "3": {
              "name": "variable.other.makefile"
            },
            "4": {
              "name": "punctuation.separator.key-value.makefile"
            }
          },
          "end": "^(endef)\\b",
          "name": "meta.scope.conditional.makefile",
          "patterns": [
            {
              "begin": "\\G(?!\\n)",
              "end": "^",
              "patterns": [
                {
                  "include": "#comment"
                }
              ]
            },
            {
              "include": "#variables"
            },
            {
              "include": "#comment"
            },
            {
              "include": "#directives"
            }
          ]
        },
        {
          "begin": "^[ ]*(export)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.$1.makefile"
            }
          },
          "end": "^",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#variable-assignment"
            },
            {
              "match": "[^\\s]+",
              "name": "variable.other.makefile"
            }
          ]
        },
        {
          "begin": "^[ ]*(override|private)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.$1.makefile"
            }
          },
          "end": "^",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#variable-assignment"
            }
          ]
        },
        {
          "begin": "^[ ]*(unexport|undefine)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.$1.makefile"
            }
          },
          "end": "^",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "match": "[^\\s]+",
              "name": "variable.other.makefile"
            }
          ]
        },
        {
          "begin": "^(ifdef|ifndef)\\s*([^\\s]+)(?=\\s)",
          "captures": {
            "1": {
              "name": "keyword.control.$1.makefile"
            },
            "2": {
              "name": "variable.other.makefile"
            },
            "3": {
              "name": "punctuation.separator.key-value.makefile"
            }
          },
          "end": "^(endif)\\b",
          "name": "meta.scope.conditional.makefile",
          "patterns": [
            {
              "begin": "\\G(?!\\n)",
              "end": "^",
              "patterns": [
                {
                  "include": "#comment"
                }
              ]
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "begin": "^(ifeq|ifneq)(?=\\s)",
          "captures": {
            "1": {
              "name": "keyword.control.$1.makefile"
            }
          },
          "end": "^(endif)\\b",
          "name": "meta.scope.conditional.makefile",
          "patterns": [
            {
              "begin": "\\G",
              "end": "^",
              "name": "meta.scope.condition.makefile",
              "patterns": [
                {
                  "include": "#variables"
                },
                {
                  "include": "#comment"
                }
              ]
            },
            {
              "begin": "^else(?=\\s)",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control.else.makefile"
                }
              },
              "end": "^"
            },
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "shell": {
      "scopeName": "source.shell",
      "patterns": [
        {
          "name": "source.shell.makefile",
          "begin": "(?=^|\\A|\\G)",
          "end": "(?-mix:(?<=[^\\\\]\\n))",
          "patterns": [
            {
              "include": "#initial_context"
            }
          ]
        }
      ],
      "repository": {
        "boolean": {
          "match": "\\b(?:true|false)\\b",
          "name": "constant.language.$0.shell.makefile"
        },
        "numeric_constant": {
          "match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])*",
          "captures": {
            "0": {
              "patterns": [
                {
                  "begin": "(?=.)",
                  "end": "$",
                  "patterns": [
                    {
                      "match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
                      "captures": {
                        "1": {
                          "name": "keyword.other.unit.hexadecimal.shell.makefile"
                        },
                        "2": {
                          "name": "constant.numeric.hexadecimal.shell.makefile",
                          "patterns": [
                            {
                              "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                              "name": "punctuation.separator.constant.numeric.shell.makefile"
                            }
                          ]
                        },
                        "3": {
                          "name": "punctuation.separator.constant.numeric.shell.makefile"
                        },
                        "4": {
                          "name": "constant.numeric.hexadecimal.shell.makefile"
                        },
                        "5": {
                          "name": "constant.numeric.hexadecimal.shell.makefile",
                          "patterns": [
                            {
                              "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                              "name": "punctuation.separator.constant.numeric.shell.makefile"
                            }
                          ]
                        },
                        "6": {
                          "name": "punctuation.separator.constant.numeric.shell.makefile"
                        },
                        "8": {
                          "name": "keyword.other.unit.exponent.hexadecimal.shell.makefile"
                        },
                        "9": {
                          "name": "keyword.operator.plus.exponent.hexadecimal.shell.makefile"
                        },
                        "10": {
                          "name": "keyword.operator.minus.exponent.hexadecimal.shell.makefile"
                        },
                        "11": {
                          "name": "constant.numeric.exponent.hexadecimal.shell.makefile",
                          "patterns": [
                            {
                              "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                              "name": "punctuation.separator.constant.numeric.shell.makefile"
                            }
                          ]
                        },
                        "12": {
                          "name": "keyword.other.unit.suffix.floating-point.shell.makefile"
                        }
                      }
                    },
                    {
                      "match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
                      "captures": {
                        "2": {
                          "name": "constant.numeric.decimal.shell.makefile",
                          "patterns": [
                            {
                              "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                              "name": "punctuation.separator.constant.numeric.shell.makefile"
                            }
                          ]
                        },
                        "3": {
                          "name": "punctuation.separator.constant.numeric.shell.makefile"
                        },
                        "4": {
                          "name": "constant.numeric.decimal.point.shell.makefile"
                        },
                        "5": {
                          "name": "constant.numeric.decimal.shell.makefile",
                          "patterns": [
                            {
                              "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                              "name": "punctuation.separator.constant.numeric.shell.makefile"
                            }
                          ]
                        },
                        "6": {
                          "name": "punctuation.separator.constant.numeric.shell.makefile"
                        },
                        "8": {
                          "name": "keyword.other.unit.exponent.decimal.shell.makefile"
                        },
                        "9": {
                          "name": "keyword.operator.plus.exponent.decimal.shell.makefile"
                        },
                        "10": {
                          "name": "keyword.operator.minus.exponent.decimal.shell.makefile"
                        },
                        "11": {
                          "name": "constant.numeric.exponent.decimal.shell.makefile",
                          "patterns": [
                            {
                              "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                              "name": "punctuation.separator.constant.numeric.shell.makefile"
                            }
                          ]
                        },
                        "12": {
                          "name": "keyword.other.unit.suffix.floating-point.shell.makefile"
                        }
                      }
                    },
                    {
                      "match": "(\\G0[bB])([01](?:[01]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                      "captures": {
                        "1": {
                          "name": "keyword.other.unit.binary.shell.makefile"
                        },
                        "2": {
                          "name": "constant.numeric.binary.shell.makefile",
                          "patterns": [
                            {
                              "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                              "name": "punctuation.separator.constant.numeric.shell.makefile"
                            }
                          ]
                        },
                        "3": {
                          "name": "punctuation.separator.constant.numeric.shell.makefile"
                        },
                        "4": {
                          "name": "keyword.other.unit.suffix.integer.shell.makefile"
                        }
                      }
                    },
                    {
                      "match": "(\\G0)((?:[0-7]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))+)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                      "captures": {
                        "1": {
                          "name": "keyword.other.unit.octal.shell.makefile"
                        },
                        "2": {
                          "name": "constant.numeric.octal.shell.makefile",
                          "patterns": [
                            {
                              "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                              "name": "punctuation.separator.constant.numeric.shell.makefile"
                            }
                          ]
                        },
                        "3": {
                          "name": "punctuation.separator.constant.numeric.shell.makefile"
                        },
                        "4": {
                          "name": "keyword.other.unit.suffix.integer.shell.makefile"
                        }
                      }
                    },
                    {
                      "match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                      "captures": {
                        "1": {
                          "name": "keyword.other.unit.hexadecimal.shell.makefile"
                        },
                        "2": {
                          "name": "constant.numeric.hexadecimal.shell.makefile",
                          "patterns": [
                            {
                              "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                              "name": "punctuation.separator.constant.numeric.shell.makefile"
                            }
                          ]
                        },
                        "3": {
                          "name": "punctuation.separator.constant.numeric.shell.makefile"
                        },
                        "5": {
                          "name": "keyword.other.unit.exponent.hexadecimal.shell.makefile"
                        },
                        "6": {
                          "name": "keyword.operator.plus.exponent.hexadecimal.shell.makefile"
                        },
                        "7": {
                          "name": "keyword.operator.minus.exponent.hexadecimal.shell.makefile"
                        },
                        "8": {
                          "name": "constant.numeric.exponent.hexadecimal.shell.makefile",
                          "patterns": [
                            {
                              "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                              "name": "punctuation.separator.constant.numeric.shell.makefile"
                            }
                          ]
                        },
                        "9": {
                          "name": "keyword.other.unit.suffix.integer.shell.makefile"
                        }
                      }
                    },
                    {
                      "match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                      "captures": {
                        "2": {
                          "name": "constant.numeric.decimal.shell.makefile",
                          "patterns": [
                            {
                              "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                              "name": "punctuation.separator.constant.numeric.shell.makefile"
                            }
                          ]
                        },
                        "3": {
                          "name": "punctuation.separator.constant.numeric.shell.makefile"
                        },
                        "5": {
                          "name": "keyword.other.unit.exponent.decimal.shell.makefile"
                        },
                        "6": {
                          "name": "keyword.operator.plus.exponent.decimal.shell.makefile"
                        },
                        "7": {
                          "name": "keyword.operator.minus.exponent.decimal.shell.makefile"
                        },
                        "8": {
                          "name": "constant.numeric.exponent.decimal.shell.makefile",
                          "patterns": [
                            {
                              "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                              "name": "punctuation.separator.constant.numeric.shell.makefile"
                            }
                          ]
                        },
                        "9": {
                          "name": "keyword.other.unit.suffix.integer.shell.makefile"
                        }
                      }
                    },
                    {
                      "match": "(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])+",
                      "name": "invalid.illegal.constant.numeric.shell.makefile"
                    }
                  ]
                }
              ]
            }
          }
        },
        "command_context": {
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#pipeline"
            },
            {
              "include": "#statement_seperator"
            },
            {
              "include": "#compound-command"
            },
            {
              "include": "#string"
            },
            {
              "include": "#variable"
            },
            {
              "include": "#interpolation"
            },
            {
              "include": "#heredoc"
            },
            {
              "include": "#herestring"
            },
            {
              "include": "#redirection"
            },
            {
              "include": "#pathname"
            },
            {
              "include": "#keyword"
            },
            {
              "include": "#support"
            },
            {
              "include": "#line_continuation"
            }
          ]
        },
        "option_context": {
          "patterns": [
            {
              "include": "#compound-command"
            },
            {
              "include": "#string"
            },
            {
              "include": "#variable"
            },
            {
              "include": "#interpolation"
            },
            {
              "include": "#heredoc"
            },
            {
              "include": "#herestring"
            },
            {
              "include": "#redirection"
            },
            {
              "include": "#pathname"
            },
            {
              "include": "#keyword"
            },
            {
              "include": "#support"
            }
          ]
        },
        "logical_expression_context": {
          "patterns": [
            {
              "include": "#regex_comparison"
            },
            {
              "include": "#logical-expression"
            },
            {
              "include": "#logical_expression_single"
            },
            {
              "include": "#logical_expression_double"
            },
            {
              "include": "#comment"
            },
            {
              "include": "#boolean"
            },
            {
              "include": "#numeric_constant"
            },
            {
              "include": "#pipeline"
            },
            {
              "include": "#statement_seperator"
            },
            {
              "include": "#string"
            },
            {
              "include": "#variable"
            },
            {
              "include": "#interpolation"
            },
            {
              "include": "#heredoc"
            },
            {
              "include": "#herestring"
            },
            {
              "include": "#pathname"
            },
            {
              "include": "#keyword"
            },
            {
              "include": "#support"
            }
          ]
        },
        "variable_assignment_context": {
          "patterns": [
            {
              "include": "#initial_context"
            }
          ]
        },
        "line_continuation": {
          "match": "\\\\(?=\\n)",
          "name": "constant.character.escape.line-continuation.shell.makefile"
        },
        "case-clause": {
          "patterns": [
            {
              "begin": "(?=\\S)",
              "end": ";;",
              "endCaptures": {
                "0": {
                  "name": "punctuation.terminator.case-clause.shell.makefile"
                }
              },
              "name": "meta.scope.case-clause.shell.makefile",
              "patterns": [
                {
                  "begin": "\\(|(?=\\S)",
                  "beginCaptures": {
                    "0": {
                      "name": "punctuation.definition.case-pattern.shell.makefile"
                    }
                  },
                  "end": "\\)",
                  "endCaptures": {
                    "0": {
                      "name": "punctuation.definition.case-pattern.shell.makefile"
                    }
                  },
                  "name": "meta.scope.case-pattern.shell.makefile",
                  "patterns": [
                    {
                      "match": "\\|",
                      "name": "punctuation.separator.pipe-sign.shell.makefile"
                    },
                    {
                      "include": "#string"
                    },
                    {
                      "include": "#variable"
                    },
                    {
                      "include": "#interpolation"
                    },
                    {
                      "include": "#pathname"
                    }
                  ]
                },
                {
                  "begin": "(?<=\\))",
                  "end": "(?=;;)",
                  "name": "meta.scope.case-clause-body.shell.makefile",
                  "patterns": [
                    {
                      "include": "#initial_context"
                    }
                  ]
                }
              ]
            }
          ]
        },
        "comment": {
          "begin": "(^\\s+)?(?<=^|\\W)(?<!-)(?=#)(?!#{)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.shell.makefile"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "begin": "#!",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.shebang.shell.makefile"
                }
              },
              "end": "$",
              "name": "comment.line.number-sign.shebang.shell.makefile"
            },
            {
              "begin": "#",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.shell.makefile"
                }
              },
              "end": "$",
              "name": "comment.line.number-sign.shell.makefile"
            }
          ]
        },
        "compound-command": {
          "patterns": [
            {
              "begin": "\\[{1,2}",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.logical-expression.shell.makefile"
                }
              },
              "end": "\\]{1,2}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.logical-expression.shell.makefile"
                }
              },
              "name": "meta.scope.logical-expression.shell.makefile",
              "patterns": [
                {
                  "include": "#logical-expression"
                },
                {
                  "include": "#initial_context"
                }
              ]
            },
            {
              "begin": "\\({2}",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.shell.makefile"
                }
              },
              "end": "\\){2}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.string.end.shell.makefile"
                }
              },
              "name": "string.other.math.shell.makefile",
              "patterns": [
                {
                  "include": "#math"
                }
              ]
            },
            {
              "begin": "\\(",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.subshell.shell.makefile"
                }
              },
              "end": "\\)",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.subshell.shell.makefile"
                }
              },
              "name": "meta.scope.subshell.shell.makefile",
              "patterns": [
                {
                  "include": "#initial_context"
                }
              ]
            },
            {
              "begin": "(?<=\\s|^){(?=\\s|$)",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.group.shell.makefile"
                }
              },
              "end": "(?<=^|;)\\s*(})",
              "endCaptures": {
                "1": {
                  "name": "punctuation.definition.group.shell.makefile"
                }
              },
              "name": "meta.scope.group.shell.makefile",
              "patterns": [
                {
                  "include": "#initial_context"
                }
              ]
            }
          ]
        },
        "function-definition": {
          "patterns": [
            {
              "begin": "(?<=^|;|&|\\s)(function)\\s+([^\\s\\\\]+)(?:\\s*(\\(\\)))?",
              "beginCaptures": {
                "1": {
                  "name": "storage.type.function.shell.makefile"
                },
                "2": {
                  "name": "entity.name.function.shell.makefile"
                },
                "3": {
                  "name": "punctuation.definition.arguments.shell.makefile"
                }
              },
              "end": ";|&|$",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.function.shell.makefile"
                }
              },
              "name": "meta.function.shell.makefile",
              "patterns": [
                {
                  "include": "#initial_context"
                }
              ]
            },
            {
              "begin": "(?<=^|;|&|\\s)([^\\s\\\\=]+)\\s*(\\(\\))",
              "beginCaptures": {
                "1": {
                  "name": "entity.name.function.shell.makefile"
                },
                "2": {
                  "name": "punctuation.definition.arguments.shell.makefile"
                }
              },
              "end": ";|&|$",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.function.shell.makefile"
                }
              },
              "name": "meta.function.shell.makefile",
              "patterns": [
                {
                  "include": "#initial_context"
                }
              ]
            }
          ]
        },
        "heredoc": {
          "patterns": [
            {
              "begin": "(<<)-\\s*(\"|'|)\\s*(RUBY)(?=\\s|;|&|<|\"|')\\2",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.heredoc.shell.makefile"
                },
                "3": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "end": "^\\t*(RUBY)(?=\\s|;|&|$)",
              "endCaptures": {
                "1": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "name": "string.unquoted.heredoc.no-indent.ruby.shell.makefile",
              "contentName": "source.ruby.embedded.shell.makefile",
              "patterns": [
                {
                  "include": "source.ruby"
                }
              ]
            },
            {
              "begin": "(<<)\\s*(\"|'|)\\s*(RUBY)(?=\\s|;|&|<|\"|')\\2",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.heredoc.shell.makefile"
                },
                "3": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "end": "^(RUBY)(?=\\s|;|&|$)",
              "endCaptures": {
                "1": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "name": "string.unquoted.heredoc.ruby.shell.makefile",
              "contentName": "source.ruby.embedded.shell.makefile",
              "patterns": [
                {
                  "include": "source.ruby"
                }
              ]
            },
            {
              "begin": "(<<)-\\s*(\"|'|)\\s*(PYTHON)(?=\\s|;|&|<|\"|')\\2",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.heredoc.shell.makefile"
                },
                "3": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "end": "^\\t*(PYTHON)(?=\\s|;|&|$)",
              "endCaptures": {
                "1": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "name": "string.unquoted.heredoc.no-indent.python.shell.makefile",
              "contentName": "source.python.embedded.shell.makefile",
              "patterns": [
                {
                  "include": "source.python"
                }
              ]
            },
            {
              "begin": "(<<)\\s*(\"|'|)\\s*(PYTHON)(?=\\s|;|&|<|\"|')\\2",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.heredoc.shell.makefile"
                },
                "3": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "end": "^(PYTHON)(?=\\s|;|&|$)",
              "endCaptures": {
                "1": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "name": "string.unquoted.heredoc.python.shell.makefile",
              "contentName": "source.python.embedded.shell.makefile",
              "patterns": [
                {
                  "include": "source.python"
                }
              ]
            },
            {
              "begin": "(<<)-\\s*(\"|'|)\\s*(APPLESCRIPT)(?=\\s|;|&|<|\"|')\\2",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.heredoc.shell.makefile"
                },
                "3": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "end": "^\\t*(APPLESCRIPT)(?=\\s|;|&|$)",
              "endCaptures": {
                "1": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "name": "string.unquoted.heredoc.no-indent.applescript.shell.makefile",
              "contentName": "source.applescript.embedded.shell.makefile",
              "patterns": [
                {
                  "include": "source.applescript"
                }
              ]
            },
            {
              "begin": "(<<)\\s*(\"|'|)\\s*(APPLESCRIPT)(?=\\s|;|&|<|\"|')\\2",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.heredoc.shell.makefile"
                },
                "3": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "end": "^(APPLESCRIPT)(?=\\s|;|&|$)",
              "endCaptures": {
                "1": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "name": "string.unquoted.heredoc.applescript.shell.makefile",
              "contentName": "source.applescript.embedded.shell.makefile",
              "patterns": [
                {
                  "include": "source.applescript"
                }
              ]
            },
            {
              "begin": "(<<)-\\s*(\"|'|)\\s*(HTML)(?=\\s|;|&|<|\"|')\\2",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.heredoc.shell.makefile"
                },
                "3": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "end": "^\\t*(HTML)(?=\\s|;|&|$)",
              "endCaptures": {
                "1": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "name": "string.unquoted.heredoc.no-indent.html.shell.makefile",
              "contentName": "text.html.embedded.shell.makefile",
              "patterns": [
                {
                  "include": "text.html.basic"
                }
              ]
            },
            {
              "begin": "(<<)\\s*(\"|'|)\\s*(HTML)(?=\\s|;|&|<|\"|')\\2",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.heredoc.shell.makefile"
                },
                "3": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "end": "^(HTML)(?=\\s|;|&|$)",
              "endCaptures": {
                "1": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "name": "string.unquoted.heredoc.html.shell.makefile",
              "contentName": "text.html.embedded.shell.makefile",
              "patterns": [
                {
                  "include": "text.html.basic"
                }
              ]
            },
            {
              "begin": "(<<)-\\s*(\"|'|)\\s*(MARKDOWN)(?=\\s|;|&|<|\"|')\\2",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.heredoc.shell.makefile"
                },
                "3": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "end": "^\\t*(MARKDOWN)(?=\\s|;|&|$)",
              "endCaptures": {
                "1": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "name": "string.unquoted.heredoc.no-indent.markdown.shell.makefile",
              "contentName": "text.html.markdown.embedded.shell.makefile",
              "patterns": [
                {
                  "include": "text.html.markdown"
                }
              ]
            },
            {
              "begin": "(<<)\\s*(\"|'|)\\s*(MARKDOWN)(?=\\s|;|&|<|\"|')\\2",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.heredoc.shell.makefile"
                },
                "3": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "end": "^(MARKDOWN)(?=\\s|;|&|$)",
              "endCaptures": {
                "1": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "name": "string.unquoted.heredoc.markdown.shell.makefile",
              "contentName": "text.html.markdown.embedded.shell.makefile",
              "patterns": [
                {
                  "include": "text.html.markdown"
                }
              ]
            },
            {
              "begin": "(<<)-\\s*(\"|'|)\\s*(TEXTILE)(?=\\s|;|&|<|\"|')\\2",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.heredoc.shell.makefile"
                },
                "3": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "end": "^\\t*(TEXTILE)(?=\\s|;|&|$)",
              "endCaptures": {
                "1": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "name": "string.unquoted.heredoc.no-indent.textile.shell.makefile",
              "contentName": "text.html.textile.embedded.shell.makefile",
              "patterns": [
                {
                  "include": "text.html.textile"
                }
              ]
            },
            {
              "begin": "(<<)\\s*(\"|'|)\\s*(TEXTILE)(?=\\s|;|&|<|\"|')\\2",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.heredoc.shell.makefile"
                },
                "3": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "end": "^(TEXTILE)(?=\\s|;|&|$)",
              "endCaptures": {
                "1": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "name": "string.unquoted.heredoc.textile.shell.makefile",
              "contentName": "text.html.textile.embedded.shell.makefile",
              "patterns": [
                {
                  "include": "text.html.textile"
                }
              ]
            },
            {
              "begin": "(<<)-\\s*(\"|'|)\\s*(SHELL)(?=\\s|;|&|<|\"|')\\2",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.heredoc.shell.makefile"
                },
                "3": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "end": "^\\t*(\\3)(?=\\s|;|&|$)",
              "endCaptures": {
                "1": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "contentName": "source.shell.embedded.shell.makefile",
              "name": "string.unquoted.heredoc.no-indent.shell.shell.makefile",
              "patterns": [
                {
                  "include": "source.shell"
                }
              ]
            },
            {
              "begin": "(<<)\\s*(\"|'|)\\s*(SHELL)(?=\\s|;|&|<|\"|')\\2",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.heredoc.shell.makefile"
                },
                "3": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "end": "^(\\3)(?=\\s|;|&|$)",
              "endCaptures": {
                "1": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "name": "string.unquoted.heredoc.shell.shell.makefile",
              "contentName": "source.shell.embedded.shell.makefile",
              "patterns": [
                {
                  "include": "source.shell"
                }
              ]
            },
            {
              "begin": "(<<)-\\s*(\"|'|)\\s*\\\\?([^;&<\\s]+)\\2",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.heredoc.shell.makefile"
                },
                "3": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "end": "^\\t*(\\3)(?=\\s|;|&|$)",
              "endCaptures": {
                "1": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "name": "string.unquoted.heredoc.no-indent.shell.makefile"
            },
            {
              "begin": "(<<)\\s*(\"|'|)\\s*\\\\?([^;&<\\s]+)\\2",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.heredoc.shell.makefile"
                },
                "3": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "end": "^(\\3)(?=\\s|;|&|$)",
              "endCaptures": {
                "1": {
                  "name": "keyword.control.heredoc-token.shell.makefile"
                }
              },
              "name": "string.unquoted.heredoc.shell.makefile"
            }
          ]
        },
        "herestring": {
          "patterns": [
            {
              "begin": "(<<<)\\s*(('))",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.herestring.shell.makefile"
                },
                "2": {
                  "name": "string.quoted.single.shell.makefile"
                },
                "3": {
                  "name": "punctuation.definition.string.begin.shell.makefile"
                }
              },
              "end": "(')",
              "endCaptures": {
                "0": {
                  "name": "string.quoted.single.shell.makefile"
                },
                "1": {
                  "name": "punctuation.definition.string.end.shell.makefile"
                }
              },
              "name": "meta.herestring.shell.makefile",
              "contentName": "string.quoted.single.shell.makefile"
            },
            {
              "begin": "(<<<)\\s*((\"))",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.herestring.shell.makefile"
                },
                "2": {
                  "name": "string.quoted.double.shell.makefile"
                },
                "3": {
                  "name": "punctuation.definition.string.begin.shell.makefile"
                }
              },
              "end": "(\")",
              "endCaptures": {
                "0": {
                  "name": "string.quoted.double.shell.makefile"
                },
                "1": {
                  "name": "punctuation.definition.string.end.shell.makefile"
                }
              },
              "name": "meta.herestring.shell.makefile",
              "contentName": "string.quoted.double.shell.makefile"
            },
            {
              "captures": {
                "1": {
                  "name": "keyword.operator.herestring.shell.makefile"
                },
                "2": {
                  "name": "string.unquoted.herestring.shell.makefile",
                  "patterns": [
                    {
                      "include": "#initial_context"
                    }
                  ]
                }
              },
              "match": "(<<<)\\s*(([^\\s)\\\\]|\\\\.)+)",
              "name": "meta.herestring.shell.makefile"
            }
          ]
        },
        "interpolation": {
          "patterns": [
            {
              "begin": "\\$\\({2}",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.evaluation.arithmetic.begin.shell.makefile"
                }
              },
              "end": "\\){2}",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.evaluation.arithmetic.end.shell.makefile"
                }
              },
              "name": "string.other.math.shell.makefile",
              "patterns": [
                {
                  "include": "#math"
                }
              ]
            },
            {
              "begin": "`",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.evaluation.backticks.shell.makefile"
                }
              },
              "end": "`",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.evaluation.backticks.shell.makefile"
                }
              },
              "name": "string.interpolated.backtick.shell.makefile",
              "patterns": [
                {
                  "match": "\\\\[`\\\\$]",
                  "name": "constant.character.escape.shell.makefile"
                },
                {
                  "begin": "(?<=\\W)(?=#)(?!#{)",
                  "beginCaptures": {
                    "1": {
                      "name": "punctuation.whitespace.comment.leading.shell.makefile"
                    }
                  },
                  "end": "(?!\\G)",
                  "patterns": [
                    {
                      "begin": "#",
                      "beginCaptures": {
                        "0": {
                          "name": "punctuation.definition.comment.shell.makefile"
                        }
                      },
                      "end": "(?=`)",
                      "name": "comment.line.number-sign.shell.makefile"
                    }
                  ]
                },
                {
                  "include": "#initial_context"
                }
              ]
            },
            {
              "begin": "\\$\\(",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.evaluation.parens.begin.shell.makefile"
                }
              },
              "end": "\\)",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.evaluation.parens.end.shell.makefile"
                }
              },
              "name": "string.interpolated.dollar.shell.makefile",
              "patterns": [
                {
                  "include": "#initial_context"
                }
              ]
            }
          ]
        },
        "keyword": {
          "patterns": [
            {
              "match": "(?<=^|;|&|\\s)(then|else|elif|fi|for|in|do|done|select|case|continue|esac|while|until|return)(?=\\s|;|&|$)",
              "name": "keyword.control.shell.makefile"
            },
            {
              "match": "(?<=^|;|&|\\s)(?:export|declare|typeset|local|readonly)(?=\\s|;|&|$)",
              "name": "storage.modifier.shell.makefile"
            }
          ]
        },
        "logical-expression": {
          "patterns": [
            {
              "comment": "do we want a special rule for ( expr )?",
              "match": "=[=~]?|!=?|<|>|&&|\\|\\|",
              "name": "keyword.operator.logical.shell.makefile"
            },
            {
              "match": "(?<!\\S)-(nt|ot|ef|eq|ne|l[te]|g[te]|[a-hknoprstuwxzOGLSN])",
              "name": "keyword.operator.logical.shell.makefile"
            }
          ]
        },
        "loop": {
          "patterns": [
            {
              "begin": "(?<=^|;|&|\\s)(for)\\s+(?=\\({2})",
              "beginCaptures": {
                "1": {
                  "name": "keyword.control.shell.makefile"
                }
              },
              "end": "(?<=^|;|&|\\s)done(?=\\s|;|&|$)",
              "endCaptures": {
                "0": {
                  "name": "keyword.control.shell.makefile"
                }
              },
              "name": "meta.scope.for-loop.shell.makefile",
              "patterns": [
                {
                  "include": "#initial_context"
                }
              ]
            },
            {
              "begin": "(?<=^|;|&|\\s)(for)\\s+(.+?)\\s+(in)(?=\\s|;|&|$)",
              "beginCaptures": {
                "1": {
                  "name": "keyword.control.shell.makefile"
                },
                "2": {
                  "name": "variable.other.loop.shell.makefile",
                  "patterns": [
                    {
                      "include": "#string"
                    }
                  ]
                },
                "3": {
                  "name": "keyword.control.shell.makefile"
                }
              },
              "end": "(?<=^|;|&|\\s)done(?=\\s|;|&|$)",
              "endCaptures": {
                "0": {
                  "name": "keyword.control.shell.makefile"
                }
              },
              "name": "meta.scope.for-in-loop.shell.makefile",
              "patterns": [
                {
                  "include": "#initial_context"
                }
              ]
            },
            {
              "begin": "(?<=^|;|&|\\s)(while|until)(?=\\s|;|&|$)",
              "beginCaptures": {
                "1": {
                  "name": "keyword.control.shell.makefile"
                }
              },
              "end": "(?<=^|;|&|\\s)done(?=\\s|;|&|$)",
              "endCaptures": {
                "0": {
                  "name": "keyword.control.shell.makefile"
                }
              },
              "name": "meta.scope.while-loop.shell.makefile",
              "patterns": [
                {
                  "include": "#initial_context"
                }
              ]
            },
            {
              "begin": "(?<=^|;|&|\\s)(select)\\s+((?:[^\\s\\\\]|\\\\.)+)(?=\\s|;|&|$)",
              "beginCaptures": {
                "1": {
                  "name": "keyword.control.shell.makefile"
                },
                "2": {
                  "name": "variable.other.loop.shell.makefile"
                }
              },
              "end": "(?<=^|;|&|\\s)(done)(?=\\s|;|&|$)",
              "endCaptures": {
                "1": {
                  "name": "keyword.control.shell.makefile"
                }
              },
              "name": "meta.scope.select-block.shell.makefile",
              "patterns": [
                {
                  "include": "#initial_context"
                }
              ]
            },
            {
              "begin": "(?<=^|;|&|\\s)case(?=\\s|;|&|$)",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control.shell.makefile"
                }
              },
              "end": "(?<=^|;|&|\\s)esac(?=\\s|;|&|$)",
              "endCaptures": {
                "0": {
                  "name": "keyword.control.shell.makefile"
                }
              },
              "name": "meta.scope.case-block.shell.makefile",
              "patterns": [
                {
                  "begin": "(?<=^|;|&|\\s)in(?=\\s|;|&|$)",
                  "beginCaptures": {
                    "0": {
                      "name": "keyword.control.shell.makefile"
                    }
                  },
                  "end": "(?<=^|;|&|\\s)(?=esac(\\s|;|&|$))",
                  "name": "meta.scope.case-body.shell.makefile",
                  "patterns": [
                    {
                      "include": "#comment"
                    },
                    {
                      "include": "#case-clause"
                    },
                    {
                      "include": "#initial_context"
                    }
                  ]
                },
                {
                  "include": "#initial_context"
                }
              ]
            },
            {
              "begin": "(?<=^|;|&|\\s)if(?=\\s|;|&|$)",
              "beginCaptures": {
                "0": {
                  "name": "keyword.control.shell.makefile"
                }
              },
              "end": "(?<=^|;|&|\\s)fi(?=\\s|;|&|$)",
              "endCaptures": {
                "0": {
                  "name": "keyword.control.shell.makefile"
                }
              },
              "name": "meta.scope.if-block.shell.makefile",
              "patterns": [
                {
                  "include": "#initial_context"
                }
              ]
            }
          ]
        },
        "math": {
          "patterns": [
            {
              "include": "#variable"
            },
            {
              "match": "\\+{1,2}|-{1,2}|!|~|\\*{1,2}|/|%|<[<=]?|>[>=]?|==|!=|^|\\|{1,2}|&{1,2}|\\?|\\:|,|=|[*/%+\\-&^|]=|<<=|>>=",
              "name": "keyword.operator.arithmetic.shell.makefile"
            },
            {
              "match": "0[xX][0-9A-Fa-f]+",
              "name": "constant.numeric.hex.shell.makefile"
            },
            {
              "match": "0\\d+",
              "name": "constant.numeric.octal.shell.makefile"
            },
            {
              "match": "\\d{1,2}#[0-9a-zA-Z@_]+",
              "name": "constant.numeric.other.shell.makefile"
            },
            {
              "match": "\\d+",
              "name": "constant.numeric.integer.shell.makefile"
            }
          ]
        },
        "pathname": {
          "patterns": [
            {
              "match": "(?<=\\s|:|=|^)~",
              "name": "keyword.operator.tilde.shell.makefile"
            },
            {
              "match": "\\*|\\?",
              "name": "keyword.operator.glob.shell.makefile"
            },
            {
              "begin": "([?*+@!])(\\()",
              "beginCaptures": {
                "1": {
                  "name": "keyword.operator.extglob.shell.makefile"
                },
                "2": {
                  "name": "punctuation.definition.extglob.shell.makefile"
                }
              },
              "end": "\\)",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.extglob.shell.makefile"
                }
              },
              "name": "meta.structure.extglob.shell.makefile",
              "patterns": [
                {
                  "include": "#initial_context"
                }
              ]
            }
          ]
        },
        "pipeline": {
          "patterns": [
            {
              "match": "(?<=^|;|&|\\s)(time)(?=\\s|;|&|$)",
              "name": "keyword.other.shell.makefile"
            },
            {
              "match": "[|!]",
              "name": "keyword.operator.pipe.shell.makefile"
            }
          ]
        },
        "redirection": {
          "patterns": [
            {
              "begin": "[><]\\(",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.shell.makefile"
                }
              },
              "end": "\\)",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.string.end.shell.makefile"
                }
              },
              "name": "string.interpolated.process-substitution.shell.makefile",
              "patterns": [
                {
                  "include": "#initial_context"
                }
              ]
            },
            {
              "match": "(?<![<>])(&>|\\d*>&\\d*|\\d*(>>|>|<)|\\d*<&|\\d*<>)(?![<>])",
              "name": "keyword.operator.redirect.shell.makefile"
            }
          ]
        },
        "string": {
          "patterns": [
            {
              "match": "\\\\.",
              "name": "constant.character.escape.shell.makefile"
            },
            {
              "begin": "'",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.shell.makefile"
                }
              },
              "end": "'",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.string.end.shell.makefile"
                }
              },
              "name": "string.quoted.single.shell.makefile"
            },
            {
              "begin": "\\$?\"",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.shell.makefile"
                }
              },
              "end": "\"",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.string.end.shell.makefile"
                }
              },
              "name": "string.quoted.double.shell.makefile",
              "patterns": [
                {
                  "match": "\\\\[\\$`\"\\\\\\n]",
                  "name": "constant.character.escape.shell.makefile"
                },
                {
                  "include": "#variable"
                },
                {
                  "include": "#interpolation"
                }
              ]
            },
            {
              "begin": "\\$'",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.string.begin.shell.makefile"
                }
              },
              "end": "'",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.string.end.shell.makefile"
                }
              },
              "name": "string.quoted.single.dollar.shell.makefile",
              "patterns": [
                {
                  "match": "\\\\(a|b|e|f|n|r|t|v|\\\\|')",
                  "name": "constant.character.escape.ansi-c.shell.makefile"
                },
                {
                  "match": "\\\\[0-9]{3}",
                  "name": "constant.character.escape.octal.shell.makefile"
                },
                {
                  "match": "\\\\x[0-9a-fA-F]{2}",
                  "name": "constant.character.escape.hex.shell.makefile"
                },
                {
                  "match": "\\\\c.",
                  "name": "constant.character.escape.control-char.shell.makefile"
                }
              ]
            }
          ]
        },
        "support": {
          "patterns": [
            {
              "match": "(?<=^|;|&|\\s)(?::|\\.)(?=\\s|;|&|$)",
              "name": "support.function.builtin.shell.makefile"
            }
          ]
        },
        "statement_seperator": {
          "match": "(?:(?:(?:(?:(;)|(&&))|(\\|\\|))|(&))|\\n)",
          "captures": {
            "1": {
              "name": "punctuation.terminator.statement.semicolon.shell.makefile"
            },
            "2": {
              "name": "punctuation.separator.statement.and.shell.makefile"
            },
            "3": {
              "name": "punctuation.separator.statement.or.shell.makefile"
            },
            "4": {
              "name": "punctuation.separator.statement.background.shell.makefile"
            }
          }
        },
        "assignment": {
          "name": "meta.expression.assignment.shell.makefile",
          "begin": "\\s*+((?:^|\\b)[a-zA-Z_][a-zA-Z0-9_]*+(?:\\b|$))(?:(\\=)|(\\+\\=))",
          "beginCaptures": {
            "1": {
              "name": "variable.other.assignment.shell.makefile"
            },
            "2": {
              "name": "keyword.operator.assignment.shell.makefile"
            },
            "3": {
              "name": "keyword.operator.assignment.compound.shell.makefile"
            }
          },
          "end": "(?:(?:(?:(?:(?:(;)|(&&))|(\\|\\|))|(&))|\\n)|(?= ))",
          "endCaptures": {
            "1": {
              "name": "punctuation.terminator.statement.semicolon.shell.makefile"
            },
            "2": {
              "name": "punctuation.separator.statement.and.shell.makefile"
            },
            "3": {
              "name": "punctuation.separator.statement.or.shell.makefile"
            },
            "4": {
              "name": "punctuation.separator.statement.background.shell.makefile"
            }
          },
          "patterns": [
            {
              "include": "#variable_assignment_context"
            }
          ]
        },
        "command_name": {
          "name": "entity.name.command.shell.makefile",
          "begin": "\\s*+(?!(?:!|%|&|\\||\\(|\\{|\\[|<|>|#|\\n|$|;))",
          "end": "(?:(?=\\s)|(?=;|\\||&|$|\\n|\\)|\\`|\\}|\\{|#|\\])(?<!\\\\))",
          "patterns": [
            {
              "include": "#custom_commands"
            },
            {
              "include": "#command_context"
            }
          ]
        },
        "argument": {
          "name": "meta.argument.shell.makefile",
          "begin": "\\s++(?!(?:!|%|&|\\||\\(|\\{|\\[|<|>|#|\\n|$|;))",
          "end": "(?=\\s|;|\\||&|$|\\n|\\)|\\`)",
          "patterns": [
            {
              "include": "#command_context"
            },
            {
              "match": "[^ \\|&;<>\\(\\)\\$`\\\\\"']+",
              "captures": {
                "0": {
                  "name": "string.unquoted.argument.shell.makefile",
                  "patterns": [
                    {
                      "match": "\\*",
                      "name": "variable.language.special.wildcard.shell.makefile"
                    }
                  ]
                }
              }
            }
          ]
        },
        "option": {
          "contentName": "string.unquoted.argument.shell.makefile constant.other.option.shell.makefile",
          "begin": "\\s++(-)((?!(?:!|%|&|\\||\\(|\\{|\\[|<|>|#|\\n|$|;)))",
          "beginCaptures": {
            "1": {
              "name": "string.unquoted.argument.shell.makefile constant.other.option.dash.shell.makefile"
            },
            "2": {
              "name": "string.unquoted.argument.shell.makefile constant.other.option.shell.makefile"
            }
          },
          "end": "(?:(?=\\s)|(?=;|\\||&|$|\\n|\\)|\\`|\\}|\\{|#|\\])(?<!\\\\))",
          "patterns": [
            {
              "include": "#option_context"
            }
          ]
        },
        "simple_options": {
          "match": "(?:\\s++(\\-)(\\w+))*",
          "captures": {
            "1": {
              "name": "string.unquoted.argument.shell.makefile constant.other.option.dash.shell.makefile"
            },
            "2": {
              "name": "string.unquoted.argument.shell.makefile constant.other.option.shell.makefile"
            }
          }
        },
        "command_call": {
          "name": "meta.statement.shell.makefile",
          "begin": "(?<=(?:^|;|\\||&|!|\\(|\\{|\\`|RUN|CMD))\\s*+(?!function\\W|function\\$|export\\W|export\\$|select\\W|select\\$|case\\W|case\\$|do\\W|do\\$|done\\W|done\\$|elif\\W|elif\\$|else\\W|else\\$|esac\\W|esac\\$|fi\\W|fi\\$|for\\W|for\\$|if\\W|if\\$|in\\W|in\\$|then\\W|then\\$|until\\W|until\\$|while\\W|while\\$)",
          "end": "(?=;|\\||&|$|\\n|\\)|\\`|\\}|\\{|#|\\])(?<!\\\\)",
          "patterns": [
            {
              "include": "#option"
            },
            {
              "include": "#argument"
            },
            {
              "include": "#command_name"
            },
            {
              "include": "#command_context"
            }
          ]
        },
        "sed_command": {
          "match": "(\\bsed\\b)(?:\\s++(\\-)(\\w+))*\\s+('s\\/)(.*)(\\/)(.*)(\\/\\w{0,4}\\')(.*)",
          "captures": {
            "1": {
              "name": "support.function.builtin.shell.makefile"
            },
            "2": {
              "name": "string.unquoted.argument.shell.makefile constant.other.option.dash.shell.makefile"
            },
            "3": {
              "name": "string.unquoted.argument.shell.makefile constant.other.option.shell.makefile"
            },
            "4": {
              "name": "punctuation.section.regexp.shell.makefile"
            },
            "5": {
              "patterns": [
                {
                  "include": "#regexp"
                }
              ]
            },
            "6": {
              "name": "punctuation.section.regexp.shell.makefile"
            },
            "7": {
              "patterns": [
                {
                  "include": "#string"
                }
              ]
            },
            "8": {
              "name": "punctuation.section.regexp.shell.makefile"
            },
            "9": {
              "patterns": [
                {
                  "include": "#option"
                },
                {
                  "include": "#argument"
                },
                {
                  "include": "#command_context"
                }
              ]
            }
          }
        },
        "custom_commands": {
          "patterns": [
            {
              "include": "#sed_command"
            },
            {
              "match": "(?<=^|;|&|\\s)(?:alias|bg|bind|break|builtin|caller|cd|command|compgen|complete|dirs|disown|echo|enable|eval|exec|exit|false|fc|fg|getopts|hash|help|history|jobs|kill|let|logout|popd|printf|pushd|pwd|read|readonly|set|shift|shopt|source|suspend|test|times|trap|true|type|ulimit|umask|unalias|unset|wait)(?=\\s|;|&|$)",
              "name": "support.function.builtin.shell.makefile"
            }
          ]
        },
        "logical_expression_single": {
          "name": "meta.scope.logical-expression.shell.makefile",
          "begin": "(\\[)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.logical-expression.shell.makefile"
            }
          },
          "end": "(\\])",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.logical-expression.shell.makefile"
            }
          },
          "patterns": [
            {
              "include": "#regex_comparison"
            },
            {
              "include": "#logical-expression"
            },
            {
              "include": "#logical_expression_single"
            },
            {
              "include": "#logical_expression_double"
            },
            {
              "include": "#comment"
            },
            {
              "include": "#boolean"
            },
            {
              "include": "#numeric_constant"
            },
            {
              "include": "#pipeline"
            },
            {
              "include": "#statement_seperator"
            },
            {
              "include": "#string"
            },
            {
              "include": "#variable"
            },
            {
              "include": "#interpolation"
            },
            {
              "include": "#heredoc"
            },
            {
              "include": "#herestring"
            },
            {
              "include": "#pathname"
            },
            {
              "include": "#keyword"
            },
            {
              "include": "#support"
            }
          ]
        },
        "logical_expression_double": {
          "name": "meta.scope.logical-expression.shell.makefile",
          "begin": "(\\[\\[)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.logical-expression.shell.makefile"
            }
          },
          "end": "(\\]\\])",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.logical-expression.shell.makefile"
            }
          },
          "patterns": [
            {
              "include": "#regex_comparison"
            },
            {
              "include": "#logical-expression"
            },
            {
              "include": "#logical_expression_single"
            },
            {
              "include": "#logical_expression_double"
            },
            {
              "include": "#comment"
            },
            {
              "include": "#boolean"
            },
            {
              "include": "#numeric_constant"
            },
            {
              "include": "#pipeline"
            },
            {
              "include": "#statement_seperator"
            },
            {
              "include": "#string"
            },
            {
              "include": "#variable"
            },
            {
              "include": "#interpolation"
            },
            {
              "include": "#heredoc"
            },
            {
              "include": "#herestring"
            },
            {
              "include": "#pathname"
            },
            {
              "include": "#keyword"
            },
            {
              "include": "#support"
            }
          ]
        },
        "regex_comparison": {
          "match": "(\\=~)\\s+([^ ]*)",
          "captures": {
            "1": {
              "name": "keyword.operator.logical.shell.makefile"
            },
            "2": {
              "patterns": [
                {
                  "include": "#variable"
                },
                {
                  "include": "#regexp"
                }
              ]
            }
          }
        },
        "variable": {
          "patterns": [
            {
              "match": "(\\$)(\\@(?=\\W))",
              "captures": {
                "1": {
                  "name": "punctuation.definition.variable.shell.makefile variable.parameter.positional.all.shell.makefile"
                },
                "2": {
                  "name": "variable.parameter.positional.all.shell.makefile"
                }
              }
            },
            {
              "match": "(\\$)([0-9](?=\\W))",
              "captures": {
                "1": {
                  "name": "punctuation.definition.variable.shell.makefile variable.parameter.positional.shell.makefile"
                },
                "2": {
                  "name": "variable.parameter.positional.shell.makefile"
                }
              }
            },
            {
              "match": "(\\$)(\\{[0-9]+\\}(?=\\W))",
              "captures": {
                "1": {
                  "name": "punctuation.definition.variable.shell.makefile variable.parameter.positional.shell.makefile"
                },
                "2": {
                  "name": "variable.parameter.positional.shell.makefile"
                }
              }
            },
            {
              "match": "(\\$)([-*#?$!0_](?=\\W))",
              "captures": {
                "1": {
                  "name": "punctuation.definition.variable.shell.makefile variable.language.special.shell.makefile"
                },
                "2": {
                  "name": "variable.language.special.shell.makefile"
                }
              }
            },
            {
              "begin": "(\\$)(\\{)",
              "beginCaptures": {
                "1": {
                  "name": "punctuation.definition.variable.shell.makefile punctuation.section.bracket.curly.variable.begin.shell.makefile"
                },
                "2": {
                  "name": "punctuation.section.bracket.curly.variable.begin.shell.makefile"
                }
              },
              "end": "(\\})",
              "endCaptures": {
                "1": {
                  "name": "punctuation.section.bracket.curly.variable.end.shell.makefile"
                }
              },
              "patterns": [
                {
                  "match": "!|:[-=?]?|\\*|@|#{1,2}|%{1,2}|/",
                  "name": "keyword.operator.expansion.shell.makefile"
                },
                {
                  "captures": {
                    "1": {
                      "name": "punctuation.section.array.shell.makefile"
                    },
                    "3": {
                      "name": "punctuation.section.array.shell.makefile"
                    }
                  },
                  "match": "(\\[)([^\\]]+)(\\])"
                },
                {
                  "include": "#variable"
                },
                {
                  "include": "#string"
                }
              ]
            },
            {
              "match": "(\\$)(\\w+(?=\\W))",
              "captures": {
                "1": {
                  "name": "punctuation.definition.variable.shell.makefile variable.other.normal.shell.makefile"
                },
                "2": {
                  "name": "variable.other.normal.shell.makefile"
                }
              }
            }
          ]
        },
        "regexp": {
          "patterns": [
            {
              "name": "keyword.control.anchor.regexp.shell.makefile",
              "match": "\\\\[bB]|\\^|\\$"
            },
            {
              "match": "\\\\[1-9]\\d*|\\\\k<([a-zA-Z_$][\\w$]*)>",
              "captures": {
                "0": {
                  "name": "keyword.other.back-reference.regexp.shell.makefile"
                },
                "1": {
                  "name": "variable.other.regexp.shell.makefile"
                }
              }
            },
            {
              "name": "keyword.operator.quantifier.regexp.shell.makefile",
              "match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
            },
            {
              "name": "keyword.operator.or.regexp.shell.makefile",
              "match": "\\|"
            },
            {
              "name": "meta.group.assertion.regexp.shell.makefile",
              "begin": "(\\()((\\?=)|(\\?!)|(\\?<=)|(\\?<!))",
              "beginCaptures": {
                "1": {
                  "name": "punctuation.definition.group.regexp.shell.makefile"
                },
                "2": {
                  "name": "punctuation.definition.group.assertion.regexp.shell.makefile"
                },
                "3": {
                  "name": "meta.assertion.look-ahead.regexp.shell.makefile"
                },
                "4": {
                  "name": "meta.assertion.negative-look-ahead.regexp.shell.makefile"
                },
                "5": {
                  "name": "meta.assertion.look-behind.regexp.shell.makefile"
                },
                "6": {
                  "name": "meta.assertion.negative-look-behind.regexp.shell.makefile"
                }
              },
              "end": "(\\))",
              "endCaptures": {
                "1": {
                  "name": "punctuation.definition.group.regexp.shell.makefile"
                }
              },
              "patterns": [
                {
                  "include": "#regexp"
                }
              ]
            },
            {
              "name": "meta.group.regexp.shell.makefile",
              "begin": "\\((?:(\\?:)|(?:\\?<([a-zA-Z_$][\\w$]*)>))?",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.group.regexp.shell.makefile"
                },
                "1": {
                  "name": "punctuation.definition.group.no-capture.regexp.shell.makefile"
                },
                "2": {
                  "name": "variable.other.regexp.shell.makefile"
                }
              },
              "end": "\\)",
              "endCaptures": {
                "0": {
                  "name": "punctuation.definition.group.regexp.shell.makefile"
                }
              },
              "patterns": [
                {
                  "include": "#regexp"
                }
              ]
            },
            {
              "name": "constant.other.character-class.set.regexp.shell.makefile",
              "begin": "(\\[)(\\^)?",
              "beginCaptures": {
                "1": {
                  "name": "punctuation.definition.character-class.regexp.shell.makefile"
                },
                "2": {
                  "name": "keyword.operator.negation.regexp.shell.makefile"
                }
              },
              "end": "(\\])",
              "endCaptures": {
                "1": {
                  "name": "punctuation.definition.character-class.regexp.shell.makefile"
                }
              },
              "patterns": [
                {
                  "name": "constant.other.character-class.range.regexp.shell.makefile",
                  "match": "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))",
                  "captures": {
                    "1": {
                      "name": "constant.character.numeric.regexp.shell.makefile"
                    },
                    "2": {
                      "name": "constant.character.control.regexp.shell.makefile"
                    },
                    "3": {
                      "name": "constant.character.escape.backslash.regexp.shell.makefile"
                    },
                    "4": {
                      "name": "constant.character.numeric.regexp.shell.makefile"
                    },
                    "5": {
                      "name": "constant.character.control.regexp.shell.makefile"
                    },
                    "6": {
                      "name": "constant.character.escape.backslash.regexp.shell.makefile"
                    }
                  }
                },
                {
                  "include": "#regex-character-class"
                }
              ]
            },
            {
              "include": "#regex-character-class"
            }
          ]
        },
        "regex_character_class": {
          "patterns": [
            {
              "name": "constant.other.character-class.regexp.shell.makefile",
              "match": "\\\\[wWsSdDtrnvf]|\\."
            },
            {
              "name": "constant.character.numeric.regexp.shell.makefile",
              "match": "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})"
            },
            {
              "name": "constant.character.control.regexp.shell.makefile",
              "match": "\\\\c[A-Z]"
            },
            {
              "name": "constant.character.escape.backslash.regexp.shell.makefile",
              "match": "\\\\."
            }
          ]
        },
        "initial_context": {
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#boolean"
            },
            {
              "include": "#numeric_constant"
            },
            {
              "include": "#pipeline"
            },
            {
              "include": "#statement_seperator"
            },
            {
              "include": "#logical_expression_double"
            },
            {
              "include": "#logical_expression_single"
            },
            {
              "include": "#compound-command"
            },
            {
              "include": "#loop"
            },
            {
              "include": "#string"
            },
            {
              "include": "#function-definition"
            },
            {
              "include": "#variable"
            },
            {
              "include": "#interpolation"
            },
            {
              "include": "#heredoc"
            },
            {
              "include": "#herestring"
            },
            {
              "include": "#redirection"
            },
            {
              "include": "#pathname"
            },
            {
              "include": "#keyword"
            },
            {
              "include": "#assignment"
            },
            {
              "include": "#command_call"
            },
            {
              "include": "#support"
            }
          ]
        }
      },
      "name": "Shell.makefile Script.makefile"
    },
    "interpolation": {
      "begin": "(?=`)",
      "end": "(?!\\G)",
      "name": "meta.embedded.line.shell",
      "patterns": [
        {
          "begin": "`",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.makefile"
            }
          },
          "end": "(`)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.makefile"
            },
            "1": {
              "name": "#shell"
            }
          },
          "name": "string.interpolated.backtick.makefile",
          "patterns": [
            {
              "include": "#shell"
            }
          ]
        }
      ]
    },
    "recipe": {
      "begin": "^(?!\\t)([^:]*)(:)(?!\\=)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "captures": {
                "1": {
                  "name": "support.function.target.$1.makefile"
                }
              },
              "match": "^\\s*(\\.(PHONY|SUFFIXES|DEFAULT|PRECIOUS|INTERMEDIATE|SECONDARY|SECONDEXPANSION|DELETE_ON_ERROR|IGNORE|LOW_RESOLUTION_TIME|SILENT|EXPORT_ALL_VARIABLES|NOTPARALLEL|ONESHELL|POSIX))\\s*$"
            },
            {
              "begin": "(?=\\S)",
              "end": "(?=\\s|$)",
              "name": "entity.name.function.target.makefile",
              "patterns": [
                {
                  "include": "#variables"
                },
                {
                  "match": "%",
                  "name": "constant.other.placeholder.makefile"
                }
              ]
            }
          ]
        },
        "2": {
          "name": "punctuation.separator.key-value.makefile"
        }
      },
      "end": "^(?!\\t)",
      "name": "meta.scope.target.makefile",
      "patterns": [
        {
          "begin": "^|\\A",
          "end": "(?<=[^\\\\]\\n)",
          "name": "meta.scope.recipe.makefile",
          "patterns": [
            {
              "include": "#shell"
            }
          ]
        },
        {
          "begin": "\\G",
          "end": "^",
          "name": "meta.scope.prerequisites.makefile",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#variables"
            },
            {
              "match": "\\\\\\n",
              "name": "constant.character.escape.continuation.makefile"
            },
            {
              "match": "%|\\*",
              "name": "constant.other.placeholder.makefile"
            }
          ]
        }
      ]
    },
    "variable-assignment": {
      "begin": "(^[ ]*|\\G\\s*)([^\\s]+)\\s*(=|\\?=|:=|\\+=)",
      "beginCaptures": {
        "2": {
          "name": "variable.other.makefile"
        },
        "3": {
          "name": "punctuation.separator.key-value.makefile"
        }
      },
      "end": "\\n",
      "patterns": [
        {
          "match": "\\\\\\n",
          "name": "constant.character.escape.continuation.makefile"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#variables"
        },
        {
          "include": "#interpolation"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.variable.makefile"
            }
          },
          "match": "(\\$?\\$)[@%<?^+*]",
          "name": "variable.language.makefile"
        },
        {
          "begin": "\\$?\\$\\(",
          "captures": {
            "0": {
              "name": "punctuation.definition.variable.makefile"
            }
          },
          "end": "\\)",
          "name": "string.interpolated.makefile",
          "patterns": [
            {
              "include": "#variables"
            },
            {
              "match": "\\G(MAKEFILES|VPATH|SHELL|MAKESHELL|MAKE|MAKELEVEL|MAKEFLAGS|MAKECMDGOALS|CURDIR|SUFFIXES|\\.LIBPATTERNS)(?=\\s*\\))",
              "name": "variable.language.makefile"
            },
            {
              "begin": "\\G(subst|patsubst|strip|findstring|filter(-out)?|sort|word(list)?|firstword|lastword|dir|notdir|suffix|basename|addsuffix|addprefix|join|wildcard|realpath|abspath|info|error|warning|shell|foreach|if|or|and|call|eval|value|file|guile)\\s",
              "beginCaptures": {
                "1": {
                  "name": "support.function.$1.makefile"
                }
              },
              "end": "(?=\\))",
              "name": "meta.scope.function-call.makefile",
              "patterns": [
                {
                  "include": "#variables"
                },
                {
                  "match": "%|\\*",
                  "name": "constant.other.placeholder.makefile"
                }
              ]
            },
            {
              "begin": "\\G(origin|flavor)\\s(?=[^\\s)]+\\s*\\))",
              "contentName": "variable.other.makefile",
              "end": "(?=\\))",
              "name": "meta.scope.function-call.makefile",
              "patterns": [
                {
                  "include": "#variables"
                }
              ]
            },
            {
              "begin": "\\G(?!\\))",
              "end": "(?=\\))",
              "name": "variable.other.makefile",
              "patterns": [
                {
                  "include": "#variables"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  "scopeName": "source.makefile"
}
